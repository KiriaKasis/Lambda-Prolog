type implies    mttType -> mttType -> mttType.
type impl_lam   mttType -> (mttTerm -> mttTerm) -> mttTerm.
type impl_app   mttTerm -> mttTerm -> mttTerm.


ofType (implies B C) KIND IE
    :- ofType B KIND1 IE
    ,  (pi x\ locDecl x B => ofType C KIND2 IE)
    ,  (pts_prop KIND1 KIND2 KIND)
    .

of (impl_lam B F) (implies B C) IE
    :- spy(pi x\ locDecl x B => of (F x) C IE)
    ,  spy(ofType (implies B C) _ IE)
    .

of (impl_app Lam X) C IE
    :- spy(isa Lam (implies B C) IE)
    ,  spy(isa X B IE)
    .

hstep (impl_app LAM Bb) (F Bb)
    :- hnf LAM (impl_lam _B F)
    .

        
dconv (implies B C) (implies B' C') :- spy(conv B B'), spy(conv C C').
dconv (impl_app F X) (impl_app F' X') :- (conv F F'), (conv X X').
dconv (impl_lam B F) (impl_lam B' F') 
    :- (conv B B')
    ,  pi x\ locDecl x B => conv (F x) (F' x)
    .

interp (implies B C) (forall Bi Ci) 
    :- interp B Bi
    ,  spy(pi x\ pi xi\ interp x xi => locDecl x B => locDecl xi Bi => interp C (Ci xi))
    .

interp (impl_lam B F) (forall_lam Bi Fi) 
    :- of (impl_lam B F) (implies B C_) ext
    ,  spy(interp B Bi)
    ,  spy(pi x\ pi xi\ (locDecl x B, locDecl xi Bi, interp x xi) => interp (F x) (Fi xi))
    .

interp (impl_app F X ) (forall_app Fi Xi) 
    :- spy(interp X Xi)
    ,  spy(interp F Fi)
    .

tau (implies B C) (implies B' C') P
    :- spy(tau B' B FB)
    ,  interp B' Bi'
    ,  spy(macro_tau B B' 
        x\x'\h\xi\xi'\hi\ tau C C' FC') 
    ,  spy(P = w\ impl_lam Bi' x\ FC' (app w (FB x)))
    . 

