type and mttType -> mttType -> mttType.
type pair_and mttType -> mttType -> mttTerm -> mttTerm -> mttTerm.
type p1_and, p2_and mttTerm -> mttTerm.

ofType (and B C) KIND IE
    :- ofType B KIND1 IE
    ,  (ofType C KIND2 IE)
    ,  (pts_prop KIND1 KIND2 KIND)
    .
    
of (pair_and B C BB CC) (and B C) IE 
    :- ofType (and B C) _ IE
    ,  (isa BB B IE)
    ,  (isa CC C IE)
    .

of (p1_and Pair) B IE 
    :- of Pair (and B C_) IE
    .

of (p2_and Pair) C IE 
    :- of Pair (and B_ C) IE
    .

hstep (p1_and Pair) (Bb) :- hnf Pair (pair_and B_ C_ Bb Cc_).

dconv (pair_and B C Bb Cc) (pair_and B' C' Bb' Cc')
    :- (conv B B')
    ,  (conv C C')
    ,  (conv Bb Bb')
    ,  (conv Cc Cc')
    .

dconv (p1_and Pair) (p1_and Pair') 
    :- (conv Pair Pair')
    .

dconv (and B C) (and B' C') 
    :- (conv B B')
    ,  (conv C C')
    .
