type forall     mttType -> (mttTerm -> mttType) -> mttType.
type forall_lam mttType -> (mttTerm -> mttTerm) -> mttTerm.
type forall_app mttTerm -> mttTerm -> mttTerm.

ofType (forall B C) KIND IE 
    :- spy(ofType B KIND1 IE)
    ,  spy(pi x\ locDecl x B  => spy(ofType (C x) KIND2 IE))
    ,  spy(pts_for KIND1 KIND2 KIND)
    .

of (forall_lam B F) (forall B C) IE
    :- spy(pi x\ locDecl x B => of (F x) (C x) IE)
    ,  spy(ofType (forall B C) _ IE)
    .

of (forall_app Lam X) (CX) IE 
    :- spy(isa Lam (forall B C) IE)
    ,  spy(isa X B IE)
    ,  spy(CX = C X)
    .

hstep (forall_app LAM Bb) (F Bb) 
    :- hnf LAM (forall_lam _B F)
    .

dconv (forall B C) (forall B' C') 
    :- (conv B B')
    ,  (pi x\ locDecl x B => conv (C x) (C' x))
    .
dconv (forall_app F X) (forall_app F' X') :- (conv F F'), (conv X X').

interp (forall B C) (forall B' C') :-
        spy (interp B B'),
        spy (pi x\ pi x'\ interp x x' 
            => locDecl x B 
                => locDecl x' B' 
                    => spy(interp (C x )(C'  x')))
    .

interp (forall_app F X) (forall_app Fi Xi)
    :- interp F Fi
    ,  interp X Xi
    .

interp (forall_lam B F) (forall_lam Bi Fi)
    :- spy(interp B Bi)
    ,  spy(pi x\ pi xi\ (locDecl x B, locDecl xi Bi, interp x xi) => interp (F x) (Fi xi))
    .

tau (forall B C) (forall B' C') P
    :- % spy(interp (forall B C) (forall Bi_ Ci_))
    % ,
       spy(interp (forall B' C') (forall Bi' Ci'_))
    ,  spy(tau B' B FB)
    ,  spy(macro_tau B B'
        (x\x'\_\xi\xi'\hi\ tau (C x) (C' x') (FC' xi xi' hi)))
    ,  spy(setoid_refl B Hi)
    ,  spy(P = f\lambda Bi' x\ FC' (FB x) x (Hi (FB x)) (app f (FB x)))
    .
